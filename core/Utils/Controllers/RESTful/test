pm.test("Response status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response has the required fields - status, message, data, and status_code", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData).to.be.an('object').that.has.all.keys('status', 'message', 'data', 'status_code');
});

pm.test("Links is an array with at least one element", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData.data.links).to.be.an('array').that.is.not.empty;
});

pm.test("Validate current_page is a non-negative integer", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData.data.current_page).to.be.a('number').and.to.be.at.least(0, "Value should be a non-negative integer");
});

pm.test("Validate last_page is a non-negative integer", function () {
    const responseData = pm.response.json();
    
    pm.expect(responseData.data.last_page).to.be.a('number').and.to.be.at.least(0, "Value should be a non-negative integer");
});

// Verify the length of data array
pm.test("The data array length must be greater than zero", function () {
    const responseData = pm.response.json();
    const data = responseData.data.data;
   
    pm.expect(data.length).to.be.greaterThan(0, "Data array should not be empty");

    data.forEach((item)=>{
      pm.expect(item.id).to.not.be.empty;
      pm.expect(item.name).to.not.be.empty;
      pm.expect(item.slug).to.not.be.empty;
    });
});

pm.test("Response time is less than 200ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(200);
});

pm.test("Response content type is application/json", function () {
    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');
});

pm.test("Schema is valid", function () {
  var schema = {
    type: "object",
    properties: {
      status: { type: "boolean" },
      message: { type: ["string", "null"] },
      data: {
        type: "object",
        properties: {
          current_page: { type: "number" },
          data: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: { type: "string" },
                name: { type: "string" },
                slug: { type: "string" },
                description: { type: ["string", "null"] },
                created_at: { type: ["string", "null"] }
              },
              required: ["id", "name", "slug"]
            }
          },
          first_page_url: { type: "string" },
          from: { type: "number" },
          last_page: { type: "number" },
          last_page_url: { type: "string" },
          links: {
            type: "array",
            items: {
              type: "object",
              properties: {
                url: { type: ["string", "null"] },
                label: { type: "string" },
                active: { type: "boolean" }
              },
              required: ["label", "active"]
            }
          },
          next_page_url: { type: "string" },
          path: { type: "string" },
          per_page: { type: "number" },
          prev_page_url: { type: "string" },
          to: { type: "number" },
          total: { type: "number" }
        },
        required: ["current_page", "data", "first_page_url", "from", "last_page", "last_page_url", "links", "next_page_url", "path", "per_page", "prev_page_url", "to", "total"]
      },
      status_code: { type: "number" }
    },
    required: ["status", "message", "data", "status_code"]
  };

  var response = pm.response.json();
  pm.expect(tv4.validate(response, schema)).to.be.true;
});

pm.test("Links array contains at least one element with non-empty url and label", function () {
    const responseData = pm.response.json().data;
    
    pm.expect(responseData.links).to.be.an('array').that.is.not.empty;
    
    responseData.links.forEach(function(link) {
        pm.expect(link.url).to.exist.and.to.not.be.empty;
        pm.expect(link.label).to.exist.and.to.not.be.empty;
    });
});

pm.test("Next and previous page URLs are either null or a non-empty string", function () {
    const responseData = pm.response.json().data;
    
    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.next_page_url).to.satisfy((value) => value === null || typeof value === 'string' && value.length > 0);
    pm.expect(responseData.prev_page_url).to.satisfy((value) => value === null || typeof value === 'string' && value.length > 0);
});

pm.test("Total value is a non-negative integer", function () {
    const responseData = pm.response.json().data;

    pm.expect(responseData).to.be.an('object');
    pm.expect(responseData.total).to.be.a('number');
    pm.expect(responseData.total).to.be.at.least(0);
});

pm.test("From and to values are non-negative integers and to is greater than or equal to from", function () {
    const responseData = pm.response.json().data;
    
    pm.expect(responseData.from).to.be.a('number').and.to.be.at.least(0);
    pm.expect(responseData.to).to.be.a('number').and.to.be.at.least(0);
    pm.expect(responseData.to).to.be.at.least(responseData.from);
});

pm.test("Current page value is within the expected range", function () {
    const responseData = pm.response.json();

    pm.expect(responseData.data.current_page).to.be.within(0, 2);
});


// Stores the current page value in a global variable
var currentPage = pm.response.json().data.current_page;
pm.globals.set("currentPage", currentPage);

// Stores the 2 roles Ids in an environment variable as an array
// Initialize an array to store role IDs
var roleIds = [];

// Extract IDs from the first two roles in the response
if (pm.response && pm.response.json() && pm.response.json().data && pm.response.json().data.data) {
    var roles = pm.response.json().data.data;
    if (roles.length >= 2) {
        roleIds.push(roles[0].id);
        roleIds.push(roles[1].id);
    } else if (roles.length === 1) {
        roleIds.push(roles[0].id);
    }
}

// Set the environment variable with the array of role IDs
pm.environment.set('roleIds', JSON.stringify(roleIds));
